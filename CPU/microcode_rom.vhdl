--
-- DO NOT EDIT THIS FILE, your changes will be overwritten
-- This is an automatically generated file.
-- It was generated with uasm, the microassembler, on
-- Thu Apr 14 17:38:26 2016
--
--
-- component microcode_rom
--   port( ADDR_IN  : in  std_logic_vector( 7 downto 0);
--         DATA_OUT : out std_logic_vector(31 downto 0));
-- end component;
--
--
-- This case statement was generated with the following
--   fields:
--
--  signal     DATA_OUT : std_logic_vector(31 downto 0);
--  signal         ASEL : std_logic_vector( 2 downto 0);
--  signal         BSEL : std_logic_vector( 2 downto 0);
--  signal         DSEL : std_logic_vector( 2 downto 0);
--  signal         SSEL : std_logic_vector( 3 downto 0);
--  signal         HSEL : std_logic_vector( 2 downto 0);
--  signal         MUX1 : std_logic;
--  signal         MUX2 : std_logic_vector( 2 downto 0);
--  signal         ADRS : std_logic_vector( 7 downto 0);
--  signal         MISC : std_logic_vector( 3 downto 0);
--
--
--                 ASEL <= DATA_OUT(31 downto 29);   -- bit size: 3
--                 BSEL <= DATA_OUT(28 downto 26);   -- bit size: 3
--                 DSEL <= DATA_OUT(25 downto 23);   -- bit size: 3
--                 SSEL <= DATA_OUT(22 downto 19);   -- bit size: 4
--                 HSEL <= DATA_OUT(18 downto 16);   -- bit size: 3
--                 MUX1 <= DATA_OUT(15);             -- bit size: 1
--                 MUX2 <= DATA_OUT(14 downto 12);   -- bit size: 3
--                 ADRS <= DATA_OUT(11 downto  4);   -- bit size: 8
--                 MISC <= DATA_OUT( 3 downto  0);   -- bit size: 4
--
-- Yeilding a total data width of 32 bits for 9 fields.
-- The maximum address encountered was 0xff, needing 8 bits
--
library ieee;
use ieee.std_logic_1164.ALL;

entity microcode_rom is
port( ADDR_IN  : in  std_logic_vector( 7 downto 0);
      DATA_OUT : out std_logic_vector(31 downto 0));
end microcode_rom;

architecture RTL of microcode_rom is

   signal DATA_OUT_R : std_logic_vector(31 downto 0);
begin
   DATA_OUT <= DATA_OUT_R;

   process(ADDR_IN)
     begin
        case ADDR_IN is
          -- START:
          when "00000000" => DATA_OUT_R <= "11100000100000110000000000000100";
          when "00000001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "00000010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00000011" => DATA_OUT_R <= "00000000000000000000000000001000";
          when "00000100" => DATA_OUT_R <= "00000000000000001001000000000000";
          when "00001000" => DATA_OUT_R <= "00000000000000000001000000000000";
          when "00010000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "00010001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "00010010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00010011" => DATA_OUT_R <= "00000000000000000011000000000000";
          when "00010100" => DATA_OUT_R <= "00000011100000000001000000000000";
          when "00011000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "00011001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "00011010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00011011" => DATA_OUT_R <= "00000000000000000101000000000000";
          when "00011100" => DATA_OUT_R <= "00000011100000000001000000000000";
          when "00100000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "00100001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "00100010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00100011" => DATA_OUT_R <= "00000011100000000001000000000000";
          when "00101000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "00101001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "00101010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00101011" => DATA_OUT_R <= "00000000000000000000000000000100";
          when "00101100" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00101101" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00101110" => DATA_OUT_R <= "00000000100000000001000000000000";
          when "00110000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "00110001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "00110010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00110011" => DATA_OUT_R <= "00000000100000000001000000000000";
          when "00111000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "00111001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "00111010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "00111011" => DATA_OUT_R <= "00100000000000000001000000000010";
          when "01000000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "01000001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "01000010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "01000011" => DATA_OUT_R <= "00100000110100000001000000000000";
          when "01001000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "01001001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "01001010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "01001011" => DATA_OUT_R <= "00000000000110000000000000000000";
          when "01001100" => DATA_OUT_R <= "11000011001100000000000000000000";
          when "01001101" => DATA_OUT_R <= "11000000000000000000000000000100";
          when "01001110" => DATA_OUT_R <= "11100000000000000000000000000010";
          when "01001111" => DATA_OUT_R <= "01100011100000000001000000000000";
          when "01010000" => DATA_OUT_R <= "11000000000000000000000000000100";
          when "01010001" => DATA_OUT_R <= "11000011000010000000000000000001";
          when "01010010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "01010011" => DATA_OUT_R <= "00000011100000000000000000000000";
          when "01010100" => DATA_OUT_R <= "00000000000000000001000000000000";
          when "01011000" => DATA_OUT_R <= "11100000000000000000000000000100";
          when "01011001" => DATA_OUT_R <= "11100011100010000000000000000001";
          when "01011010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "01011011" => DATA_OUT_R <= "00000001000000000001000000000000";
          when "01100000" => DATA_OUT_R <= "11000011001100000000000000000000";
          when "01100001" => DATA_OUT_R <= "11000000000000000000000000000100";
          when "01100010" => DATA_OUT_R <= "00100000000000000000000000000010";
          when "01100011" => DATA_OUT_R <= "00000000000000000001000000000000";
          when "01101000" => DATA_OUT_R <= "11000011000010000000000000000100";
          when "01101001" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "01101010" => DATA_OUT_R <= "00000000000000000000000000000001";
          when "01101011" => DATA_OUT_R <= "00000000100000000001000000000000";
          when "01110000" => DATA_OUT_R <= "01000001000010000001000000000000";
          when "11111111" => DATA_OUT_R <= "00000000000000000000000000000000";
          when others => DATA_OUT_R <= "00000000000000000000000000000000";
       end case;
     end process;
end RTL;
